import socket
import binascii
import struct
import string

class IpPacket(object):
    """
    Represents the *required* data to be extracted from an IP packet.
    """

    def __init__(self, protocol, ihl, source_address, destination_address, payload):
        self.protocol = protocol
        self.ihl = ihl
        self.source_address = source_address
        self.destination_address = destination_address
        self.payload = payload

    def display_ip_packet(self):
        print(f"protocol:", self.protocol)
        print(f"IHL:", self.ihl)
        print(f"source:", self.source_address)
        print(f"Destination:", self.destination_address)
        if (self.payload==None):
            print('payload:Data can not be decoded')
        else:
            print(f"TCP_PACKET:", self.payload)
        print('\n')




class TcpPacket(object):
    """
    Represents the *required* data to be extracted from a TCP packet.
    """

    def __init__(self, src_port, dst_port, data_offset, payload):
        self.src_port = src_port
        self.dst_port = dst_port
        # As far as I know, this field doesn't appear in Wireshark for some reason.
        self.data_offset = data_offset
        self.payload = payload


def parse_raw_ip_addr(raw_ip_addr: bytes) -> str:
# Converts a byte-array IP address to a string
# the input is on the form b'\xaa\xab'... a byte array
# return "0.0.0.0"


# def parse_application_layer_packet(ip_packet_payload: bytes) -> TcpPacket:
# Parses raw bytes of a TCP packet
# That's a byte literal (~byte array) check resources section
    return TcpPacket(-1, -1, -1, b'')


def parse_network_layer_packet(ip_packet):

# Parses raw bytes of an IPv4 packet
# That's a byte literal (~byte array) check resources section

    data=ip_packet[14:]
    first_byte=data[0]
    #version=first_byte >>4
    ihl=(first_byte & 15) * 4
    protocol,source ,destination=struct.unpack('! 9x B 2x 4s 4s',ip_packet[:20])
    payload=data[ihl:]
    pl=payload.strip()
    mapped_source=map(str,source)
    mapped_destination=map(str,destination)
    source_string='.'.join(mapped_source)
    destination_string='.'.join(mapped_destination)

    try:
        payload2=pl.decode('utf-8')
    #print(payload2)
    except:
        payload2=None
    ip_object=IpPacket(protocol,ihl, source_string, destination_string, payload2)
    return ip_object,payload



def main():
    # Un-comment this line if you're getting too much noisy traffic.
    # to bind to an interface on your PC. (or you can simply disconnect from the internet)

    # iface_name = "lo"
    # stealer.setsockopt(socket.SOL_SOCKET,
    #                    socket.SO_BINDTODEVICE, bytes(iface_name, "ASCII"))
    stealer = socket.socket(socket.AF_INET, socket.SOCK_RAW,6)

    while True:
        # Receive packets and do processing here
        data, address = stealer.recvfrom(4096)
        ip_obj,tcp_packet=parse_network_layer_packet(data)
        IpPacket.display_ip_packet(ip_obj)
        parse_raw_ip_addr(tcp_packet)

        pass
    pass


if __name__ == "__main__":
    main()
